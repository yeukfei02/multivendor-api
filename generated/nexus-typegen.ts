/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AddUserResult: { // root type
    message: string; // String!
  }
  GetUserResult: { // root type
    message: string; // String!
    users?: NexusGenRootTypes['Users'] | null; // Users
  }
  Mutation: {};
  Query: {};
  Users: { // root type
    allow_order: boolean; // Boolean!
    created_at: string; // String!
    id: string; // String!
    is_active: boolean; // Boolean!
    phone: string; // String!
    phone_confirmed: boolean; // Boolean!
    updated_at: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AddUserResult: { // field return type
    message: string; // String!
  }
  GetUserResult: { // field return type
    message: string; // String!
    users: NexusGenRootTypes['Users'] | null; // Users
  }
  Mutation: { // field return type
    addUser: NexusGenRootTypes['AddUserResult']; // AddUserResult!
  }
  Query: { // field return type
    getUsers: NexusGenRootTypes['GetUserResult']; // GetUserResult!
  }
  Users: { // field return type
    allow_order: boolean; // Boolean!
    created_at: string; // String!
    id: string; // String!
    is_active: boolean; // Boolean!
    phone: string; // String!
    phone_confirmed: boolean; // Boolean!
    updated_at: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  AddUserResult: { // field return type name
    message: 'String'
  }
  GetUserResult: { // field return type name
    message: 'String'
    users: 'Users'
  }
  Mutation: { // field return type name
    addUser: 'AddUserResult'
  }
  Query: { // field return type name
    getUsers: 'GetUserResult'
  }
  Users: { // field return type name
    allow_order: 'Boolean'
    created_at: 'String'
    id: 'String'
    is_active: 'Boolean'
    phone: 'String'
    phone_confirmed: 'Boolean'
    updated_at: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addUser: { // args
      phone: string; // String!
    }
  }
  Query: {
    getUsers: { // args
      phone: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}