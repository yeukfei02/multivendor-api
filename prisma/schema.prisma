generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV")
}

model users {
  id                 String             @id @default(uuid()) @db.Uuid
  phone              String             @unique
  phone_confirmed    Boolean            @default(false)
  type               String?
  allow_order        Boolean            @default(false)
  is_active          Boolean            @default(false)
  created_at         DateTime           @default(now())
  updated_at         DateTime           @default(now())
  company            company?
  delivery_addresses delivery_address[]
  last_events        last_event[]
  orders             order[]

  @@index([phone, phone_confirmed, type, allow_order, is_active])
}

model last_event {
  id         String   @id @default(uuid()) @db.Uuid
  type       String
  user_id    String?  @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  users      users?   @relation(fields: [user_id], references: [id])

  @@index([type, user_id])
}

model phone_confirmation {
  id         String    @id @default(uuid()) @db.Uuid
  phone      String
  code       String
  ip         String
  used_at    DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())

  @@index([phone, code, ip, used_at])
}

model company {
  id         String   @id @default(uuid()) @db.Uuid
  code       String
  name       String
  address    String
  user_id    String?  @unique @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  users      users?   @relation(fields: [user_id], references: [id])
  orders     order[]

  @@index([code, name, address, user_id])
}

model delivery_address {
  id         String    @id @default(uuid()) @db.Uuid
  address    String
  geo_code   String
  last_used  DateTime?
  comment    String?
  phone      String
  user_id    String?   @db.Uuid
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  users      users?    @relation(fields: [user_id], references: [id])

  @@index([address, geo_code, last_used, comment, phone, user_id])
}

model order {
  id             String    @id @default(uuid()) @db.Uuid
  number         Int
  status         String
  comment        String?
  address        String
  delivery_at    DateTime?
  delivery_price Decimal?
  discount       Decimal?
  total          Decimal?
  user_id        String    @db.Uuid
  company_id     String    @db.Uuid
  vendor_id      String    @db.Uuid
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())
  users          users?    @relation(fields: [user_id], references: [id])
  company        company?  @relation(fields: [company_id], references: [id])
  vendor         vendor?   @relation(fields: [vendor_id], references: [id])

  @@index([number, status, comment, address, delivery_at, delivery_price, discount, total, user_id, company_id, vendor_id])
}

model vendor {
  id            String   @id @default(uuid()) @db.Uuid
  name          String
  slug          String?
  payment       String
  delivery      String
  description   String
  working_hours Int
  rating        Int
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  orders        order[]

  @@index([name, slug, payment, delivery, description, working_hours, rating])
}
